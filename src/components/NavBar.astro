---
import type { SiteContent } from '../utils/content'

interface Props {
  navigation: SiteContent['navigation']
  basePath: string
}

const { navigation, basePath } = Astro.props
---

<div class="flex min-w-0 flex-1 flex-wrap items-center justify-end gap-3">
  <nav aria-label={navigation.ariaLabel} class="hidden text-sm font-semibold lg:flex">
    <ul class="flex flex-wrap items-center gap-2 rounded-full bg-white/40 px-3 py-1 text-slate-700 backdrop-blur-sm transition dark:bg-white/10 dark:text-slate-200">
      {navigation.links.map((link) => (
        <li>
          <a
            href={`${basePath}#${link.id}`}
            class="rounded-full px-4 py-1 transition hover:bg-[#0CA000] hover:text-slate-950 dark:hover:bg-[#06C300]"
          >
            {link.name}
          </a>
        </li>
      ))}
    </ul>
  </nav>

  <button
    type="button"
    class="inline-flex h-11 w-11 items-center justify-center rounded-full border border-slate-200 bg-white/70 text-slate-700 shadow-sm transition hover:border-[#0CA000] hover:text-[#0CA000] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#06C300] dark:border-slate-700 dark:bg-slate-900/70 dark:text-slate-200 dark:hover:border-[#06C300] dark:hover:text-[#06C300] lg:hidden"
    aria-expanded="false"
    aria-controls="mobile-navigation"
    aria-label={navigation.openMenuLabel}
    data-menu-button
    data-open-label={navigation.openMenuLabel}
    data-close-label={navigation.closeMenuLabel}
    data-open-sr-label={navigation.openMenuSrLabel}
    data-close-sr-label={navigation.closeMenuSrLabel}
  >
    <span class="sr-only">{navigation.openMenuSrLabel}</span>
    <svg
      class="h-5 w-5"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.8"
      stroke-linecap="round"
      stroke-linejoin="round"
      aria-hidden="true"
    >
      <path d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>
</div>

<div
  id="mobile-navigation"
  role="dialog"
  aria-modal="true"
  aria-hidden="true"
  aria-labelledby="mobile-navigation-title"
  data-mobile-menu
  data-open="false"
  class="fixed inset-0 z-40 flex justify-end bg-slate-950/80 px-4 pb-8 pt-6 backdrop-blur-sm transition-opacity duration-200 data-[open='false']:pointer-events-none data-[open='false']:opacity-0 lg:hidden"
>
  <div
    class="flex h-full w-full max-w-sm flex-col gap-8 rounded-3xl border border-slate-200 bg-white/95 p-6 text-slate-900 shadow-2xl shadow-slate-950/10 dark:border-slate-700 dark:bg-slate-900/85 dark:text-slate-100 dark:shadow-black/40"
  >
    <div class="flex items-center justify-between">
      <p id="mobile-navigation-title" class="text-xs font-semibold uppercase tracking-[0.35em] text-slate-500 dark:text-slate-400">
        {navigation.mobileTitle}
      </p>
      <button
        type="button"
        class="flex h-10 w-10 items-center justify-center rounded-full border border-slate-200 text-slate-600 transition hover:border-[#0CA000] hover:text-[#0CA000] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#06C300] dark:border-slate-600 dark:text-slate-200 dark:hover:border-[#06C300] dark:hover:text-[#06C300]"
        aria-label={navigation.closeMenuLabel}
        data-menu-close
      >
        <span class="sr-only">{navigation.closeMenuSrLabel}</span>
        <svg
          class="h-5 w-5"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="1.8"
          stroke-linecap="round"
          stroke-linejoin="round"
          aria-hidden="true"
        >
          <path d="M6 6l12 12M18 6L6 18" />
        </svg>
      </button>
    </div>

    <nav aria-label={navigation.mobileNavLabel} class="flex-1 min-h-0 overflow-y-auto">
      <ul class="space-y-3">
        {navigation.links.map((link) => (
          <li>
            <a
              href={`${basePath}#${link.id}`}
              class="flex items-center justify-between gap-4 rounded-2xl bg-white/90 px-4 py-3 text-base font-semibold text-slate-900 shadow-md shadow-slate-950/10 transition hover:bg-[#0CA000]/15 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-[#0CA000]/70 dark:bg-slate-900/80 dark:text-white dark:shadow-black/20 dark:hover:bg-[#06C300]/15"
              data-menu-link
            >
              <span class="flex items-center gap-3">
                <span class="flex h-10 w-10 items-center justify-center rounded-2xl bg-slate-100 text-slate-700 transition dark:bg-slate-800 dark:text-slate-200">
                  <img src={`/icons/${link.icon}`} alt="" aria-hidden="true" class="h-5 w-5 dark:brightness-200 dark:invert" />
                </span>
                {link.name}
              </span>
              <svg class="h-4 w-4 text-slate-400 transition dark:text-slate-500" viewBox="0 0 20 20" fill="none" aria-hidden="true">
                <path d="M7 4l6 6-6 6" stroke="currentColor" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <div class="rounded-2xl border border-slate-200 bg-slate-50/80 p-4 text-sm text-slate-600 shadow-sm shadow-slate-900/5 dark:border-slate-700 dark:bg-slate-800/60 dark:text-slate-300 dark:shadow-black/20">
      <p>{navigation.prompt}</p>
    </div>
  </div>
</div>

<script is:inline>
  const menuButton = document.querySelector('[data-menu-button]')
  const menu = document.querySelector('[data-mobile-menu]')

  if (menuButton && menu) {
    const openLabel = menuButton.dataset.openLabel ?? menuButton.getAttribute('aria-label') ?? ''
    const closeLabel = menuButton.dataset.closeLabel ?? ''
    const openSrLabel = menuButton.dataset.openSrLabel ?? ''
    const closeSrLabel = menuButton.dataset.closeSrLabel ?? ''
    const closeButton = menu.querySelector('[data-menu-close]')
    const menuLinks = Array.from(menu.querySelectorAll('[data-menu-link]')).filter((element) =>
      element instanceof HTMLElement
    )
    const focusableItems = [closeButton, ...menuLinks].filter((element) =>
      element instanceof HTMLElement
    )

    const srText = menuButton.querySelector('.sr-only')

    const setMenuState = (open) => {
      menu.dataset.open = open ? 'true' : 'false'
      menu.setAttribute('aria-hidden', open ? 'false' : 'true')
      menuButton.setAttribute('aria-expanded', open ? 'true' : 'false')
      menuButton.setAttribute('aria-label', open ? closeLabel || openLabel : openLabel)
      if (srText) {
        srText.textContent = open ? closeSrLabel || openSrLabel : openSrLabel
      }
      document.body.classList.toggle('overflow-hidden', open)

      if (open) {
        window.requestAnimationFrame(() => {
          menuLinks[0]?.focus?.()
        })
      } else if (document.activeElement && menu.contains(document.activeElement)) {
        menuButton.focus()
      }
    }

    menuButton.addEventListener('click', () => {
      const isOpen = menu.dataset.open === 'true'
      setMenuState(!isOpen)
    })

    closeButton?.addEventListener('click', () => setMenuState(false))

    menu.addEventListener('click', (event) => {
      if (event.target === menu) {
        setMenuState(false)
      }
    })

    menuLinks.forEach((link) => {
      link.addEventListener('click', () => setMenuState(false))
    })

    document.addEventListener('keydown', (event) => {
      if (menu.dataset.open !== 'true') {
        return
      }

      if (event.key === 'Escape') {
        setMenuState(false)
        return
      }

      if (event.key === 'Tab' && focusableItems.length > 0) {
        const first = focusableItems[0]
        const last = focusableItems[focusableItems.length - 1]
        const activeElement = document.activeElement

        if (event.shiftKey) {
          if (activeElement === first) {
            event.preventDefault()
            last.focus?.()
          }
        } else if (activeElement === last) {
          event.preventDefault()
          first.focus?.()
        }
      }
    })

    const lgMediaQuery = window.matchMedia('(min-width: 1024px)')

    const handleBreakpointChange = (event) => {
      if (event.matches) {
        setMenuState(false)
      }
    }

    lgMediaQuery.addEventListener('change', handleBreakpointChange)
  }
</script>
